#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public struct FilterBag<#ITEMS_TYPE#> #ITEMS_WHERE# {

    public readonly int Length;
    public int index;
    private readonly int max;
    [Unity.Collections.NativeDisableParallelForRestriction] private ME.ECS.Collections.NativeArrayBurst<int> filterEntities;
    
    #ITEMS_BUFFER#

    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {

        var world = filter.world;
        var arrEntities = world.currentState.storage.cache;
        this.index = -1;
        this.Length = filter.Count;
        this.max = filter.Count;
        
        this.filterEntities = new ME.ECS.Collections.NativeArrayBurst<int>(filter.Count, allocator);
        var idx = 0;
        foreach (var entity in filter) {
            
            this.filterEntities[idx++] = entity.id;
            
        }
        
        #ITEMS_INIT#
        
    }

    public int GetEntityIdByIndex(int index) {

        return this.filterEntities[index];

    }
    
    public void Push() {

        var world = Worlds.currentWorld;
        var changedCount = 0;
        #ITEMS_PUSH#
        
        if (changedCount > 0) world.UpdateAllFilters();
        
        this.Dispose();
        
    }

    public void Revert() {
        
        #ITEMS_DISPOSE#

        this.Dispose();

    }

    public void Reset() {

        this.index = -1;

    }
    
    public bool MoveNext() {
        
        ++this.index;
        return this.index < this.max;

    }
    
    private void Dispose() {
        
        this.filterEntities.Dispose();
        
    }

    #region API
    #ITEMS_METHODS#
    #endregion

}
