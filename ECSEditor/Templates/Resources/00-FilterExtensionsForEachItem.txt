[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
public static void ForEach<#ITEMS_TYPE#>(this Filter filter, R<#ITEMS_TYPE#> onEach) #ITEMS_WHERE# {
    var entities = filter.ToArray();
    var buffer = new EntityBuffer<#ITEMS_TYPE#>(filter.world, entities);
    for (int i = 0; i < entities.Length; ++i) { var e = entities.arr[i]; var id = e.id; onEach.Invoke(in e, #ITEMS_GET#); }
    PoolArray<Entity>.Recycle(ref entities);
}
[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
public static void ForEach<TCustom0, #ITEMS_TYPE#>(this Filter filter, in TCustom0 custom0, RCP#INDEX#<TCustom0, #ITEMS_TYPE#> onEach) #ITEMS_WHERE# {
    var entities = filter.ToArray();
    var buffer = new EntityBuffer<#ITEMS_TYPE#>(filter.world, entities);
    for (int i = 0; i < entities.Length; ++i) { var e = entities.arr[i]; var id = e.id; onEach.Invoke(in custom0, in e, #ITEMS_GET#); }
    PoolArray<Entity>.Recycle(ref entities);
}
[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
public static void ForEach<TCustom0, TCustom1, #ITEMS_TYPE#>(this Filter filter, in TCustom0 custom0, in TCustom1 custom1, RCP#INDEX#<TCustom0, TCustom1, #ITEMS_TYPE#> onEach) #ITEMS_WHERE# {
    var entities = filter.ToArray();
    var buffer = new EntityBuffer<#ITEMS_TYPE#>(filter.world, entities);
    for (int i = 0; i < entities.Length; ++i) { var e = entities.arr[i]; var id = e.id; onEach.Invoke(in custom0, in custom1, in e, #ITEMS_GET#); }
    PoolArray<Entity>.Recycle(ref entities);
}
[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
public static void ForEach<TCustom0, TCustom1, TCustom2, #ITEMS_TYPE#>(this Filter filter, in TCustom0 custom0, in TCustom1 custom1, in TCustom2 custom2, RCP#INDEX#<TCustom0, TCustom1, TCustom2, #ITEMS_TYPE#> onEach) #ITEMS_WHERE# {
    var entities = filter.ToArray();
    var buffer = new EntityBuffer<#ITEMS_TYPE#>(filter.world, entities);
    for (int i = 0; i < entities.Length; ++i) { var e = entities.arr[i]; var id = e.id; onEach.Invoke(in custom0, in custom1, in custom2, in e, #ITEMS_GET#); }
    PoolArray<Entity>.Recycle(ref entities);
}
[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
public static void ForEach<TCustom0, TCustom1, TCustom2, TCustom3, #ITEMS_TYPE#>(this Filter filter, in TCustom0 custom0, in TCustom1 custom1, in TCustom2 custom2, in TCustom3 custom3, RCP#INDEX#<TCustom0, TCustom1, TCustom2, TCustom3, #ITEMS_TYPE#> onEach) #ITEMS_WHERE# {
    var entities = filter.ToArray();
    var buffer = new EntityBuffer<#ITEMS_TYPE#>(filter.world, entities);
    for (int i = 0; i < entities.Length; ++i) { var e = entities.arr[i]; var id = e.id; onEach.Invoke(in custom0, in custom1, in custom2, in custom3, in e, #ITEMS_GET#); }
    PoolArray<Entity>.Recycle(ref entities);
}
[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
public static void ForEach<TCustom0, TCustom1, TCustom2, TCustom3, TCustom4, #ITEMS_TYPE#>(this Filter filter, in TCustom0 custom0, in TCustom1 custom1, in TCustom2 custom2, in TCustom3 custom3, in TCustom4 custom4, RCP#INDEX#<TCustom0, TCustom1, TCustom2, TCustom3, TCustom4, #ITEMS_TYPE#> onEach) #ITEMS_WHERE# {
    var entities = filter.ToArray();
    var buffer = new EntityBuffer<#ITEMS_TYPE#>(filter.world, entities);
    for (int i = 0; i < entities.Length; ++i) { var e = entities.arr[i]; var id = e.id; onEach.Invoke(in custom0, in custom1, in custom2, in custom3, in custom4, in e, #ITEMS_GET#); }
    PoolArray<Entity>.Recycle(ref entities);
}
[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
public static void ForEach<TCustom0, TCustom1, TCustom2, TCustom3, TCustom4, TCustom5, #ITEMS_TYPE#>(this Filter filter, in TCustom0 custom0, in TCustom1 custom1, in TCustom2 custom2, in TCustom3 custom3, in TCustom4 custom4, in TCustom5 custom5, RCP#INDEX#<TCustom0, TCustom1, TCustom2, TCustom3, TCustom4, TCustom5, #ITEMS_TYPE#> onEach) #ITEMS_WHERE# {
    var entities = filter.ToArray();
    var buffer = new EntityBuffer<#ITEMS_TYPE#>(filter.world, entities);
    for (int i = 0; i < entities.Length; ++i) { var e = entities.arr[i]; var id = e.id; onEach.Invoke(in custom0, in custom1, in custom2, in custom3, in custom4, in custom5, in e, #ITEMS_GET#); }
    PoolArray<Entity>.Recycle(ref entities);
}
[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
public static void ForEach<TCustom0, TCustom1, TCustom2, TCustom3, TCustom4, TCustom5, TCustom6, #ITEMS_TYPE#>(this Filter filter, in TCustom0 custom0, in TCustom1 custom1, in TCustom2 custom2, in TCustom3 custom3, in TCustom4 custom4, in TCustom5 custom5, in TCustom6 custom6, RCP#INDEX#<TCustom0, TCustom1, TCustom2, TCustom3, TCustom4, TCustom5, TCustom6, #ITEMS_TYPE#> onEach) #ITEMS_WHERE# {
    var entities = filter.ToArray();
    var buffer = new EntityBuffer<#ITEMS_TYPE#>(filter.world, entities);
    for (int i = 0; i < entities.Length; ++i) { var e = entities.arr[i]; var id = e.id; onEach.Invoke(in custom0, in custom1, in custom2, in custom3, in custom4, in custom5, in custom6, in e, #ITEMS_GET#); }
    PoolArray<Entity>.Recycle(ref entities);
}
[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
public static void ForEach<TCustom0, TCustom1, TCustom2, TCustom3, TCustom4, TCustom5, TCustom6, TCustom7, #ITEMS_TYPE#>(this Filter filter, in TCustom0 custom0, in TCustom1 custom1, in TCustom2 custom2, in TCustom3 custom3, in TCustom4 custom4, in TCustom5 custom5, in TCustom6 custom6, in TCustom7 custom7, RCP#INDEX#<TCustom0, TCustom1, TCustom2, TCustom3, TCustom4, TCustom5, TCustom6, TCustom7, #ITEMS_TYPE#> onEach) #ITEMS_WHERE# {
    var entities = filter.ToArray();
    var buffer = new EntityBuffer<#ITEMS_TYPE#>(filter.world, entities);
    for (int i = 0; i < entities.Length; ++i) { var e = entities.arr[i]; var id = e.id; onEach.Invoke(in custom0, in custom1, in custom2, in custom3, in custom4, in custom5, in custom6, in custom7, in e, #ITEMS_GET#); }
    PoolArray<Entity>.Recycle(ref entities);
}
[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
public static void ForEach<TCustom0, TCustom1, TCustom2, TCustom3, TCustom4, TCustom5, TCustom6, TCustom7, TCustom8, #ITEMS_TYPE#>(this Filter filter, in TCustom0 custom0, in TCustom1 custom1, in TCustom2 custom2, in TCustom3 custom3, in TCustom4 custom4, in TCustom5 custom5, in TCustom6 custom6, in TCustom7 custom7, in TCustom8 custom8, RCP#INDEX#<TCustom0, TCustom1, TCustom2, TCustom3, TCustom4, TCustom5, TCustom6, TCustom7, TCustom8, #ITEMS_TYPE#> onEach) #ITEMS_WHERE# {
    var entities = filter.ToArray();
    var buffer = new EntityBuffer<#ITEMS_TYPE#>(filter.world, entities);
    for (int i = 0; i < entities.Length; ++i) { var e = entities.arr[i]; var id = e.id; onEach.Invoke(in custom0, in custom1, in custom2, in custom3, in custom4, in custom5, in custom6, in custom7, in custom8, in e, #ITEMS_GET#); }
    PoolArray<Entity>.Recycle(ref entities);
}
[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
public static void ForEach<TCustom0, TCustom1, TCustom2, TCustom3, TCustom4, TCustom5, TCustom6, TCustom7, TCustom8, TCustom9, #ITEMS_TYPE#>(this Filter filter, in TCustom0 custom0, in TCustom1 custom1, in TCustom2 custom2, in TCustom3 custom3, in TCustom4 custom4, in TCustom5 custom5, in TCustom6 custom6, in TCustom7 custom7, in TCustom8 custom8, in TCustom9 custom9, RCP#INDEX#<TCustom0, TCustom1, TCustom2, TCustom3, TCustom4, TCustom5, TCustom6, TCustom7, TCustom8, TCustom9, #ITEMS_TYPE#> onEach) #ITEMS_WHERE# {
    var entities = filter.ToArray();
    var buffer = new EntityBuffer<#ITEMS_TYPE#>(filter.world, entities);
    for (int i = 0; i < entities.Length; ++i) { var e = entities.arr[i]; var id = e.id; onEach.Invoke(in custom0, in custom1, in custom2, in custom3, in custom4, in custom5, in custom6, in custom7, in custom8, in custom9, in e, #ITEMS_GET#); }
    PoolArray<Entity>.Recycle(ref entities);
}